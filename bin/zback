#!/srv/zback/env/bin/python

import argparse
import logging
import ConfigParser
import socket
import pickle
import sys
import signal
from zback import server, client, utils, jobs

DESC = '''Need a description for this guy'''
DEFAULT_CONFIG = '/srv/zback/conf/zback.conf'

def handler_interactive(signum, frame):
    '''
    Very simple handler to catch Ctrl-C
    '''
    print "Caught Ctrl-C, exiting..."
    sys.exit(0)

def main():
    '''
    Simple wrapper script to simplify calling client.py and server.py
    '''

    # This is not ideal as its a private API. HOWEVER, it saves a great deal
    # of fucking around, especially when/if a value has to change. It is slightly 
    # dangerous in the sense that if a section or value is missing then it will cause 
    # the program to crap out but then I don't really care and this can be sorted
    # at some other time
    config = ConfigParser.ConfigParser()
    config.read(DEFAULT_CONFIG)
    config_dict = config._sections

    parser = argparse.ArgumentParser(description=DESC)
    subparsers = parser.add_subparsers(title='subcommands')

    parser_client = subparsers.add_parser('client')
    parser_client.add_argument('action', choices=['start',
                                                  'stop',
                                                  'restart',
                                                  'status'])
    parser_client.set_defaults(func=client_handler)

    parser_server = subparsers.add_parser('server') 
    parser_server.add_argument('action', choices=['start',
                                                  'stop',
                                                  'restart',
                                                  'status'])
    parser_server.set_defaults(func=server_handler)

    parser_monitor = subparsers.add_parser('monitor')
    parser_monitor.add_argument('type', choices=['snap', 'prune', 'send'])
    parser_monitor.set_defaults(func=monitor_handler)

    parser_runonce = subparsers.add_parser('runonce')
    parser_runonce.add_argument('type', choices=['snap', 'prune', 'send'])
    parser_runonce.add_argument('dataset', nargs='?')
    parser_runonce.set_defaults(func=runonce_handler)

    args = parser.parse_args()
    args.func(config_dict, args)

def setup_logging(level, log_format, log_file):
    '''
    Sets up logging
    '''
    numeric_level = getattr(logging, level, None)
    if not isinstance(numeric_level, int):
        print "Invalid log level specified for Zback Server, amend config file"
        sys.exit(1)

    handler = logging.FileHandler(log_file)
    handler.setLevel(numeric_level)
    formatter = logging.Formatter(log_format)
    handler.setFormatter(formatter)

    log = logging.getLogger('zback')
    log.setLevel(numeric_level)
    log.addHandler(handler)

    return log

def monitor_handler(config_dict, monitor_type):
    '''
    Runs specified action once, logging to file and the conesole
    '''
    print "Not currently implemented"

def runonce_handler(config_dict, runonce_type, dataset):
    '''
    Runs specified action once, logging to file and the conesole
    '''
    print "Not currently implemented"

def client_start(config_dict):
    # Starts the client
    this_client = client.ZbackClient(config_dict)
    this_client.start()

def client_stop(config_dict):
    # Try to connect to the socket of the already running client and tell it to stop
    sock = socket.socket(socket.AF_UNIX)
    try:
        sock.connect(config_dict['client']['socket'])
    except socket.error:
        print "Could not connect to client socket, check if it is running"
        sys.exit(1)
    sock.send(pickle.dumps("stop"))
    sys.exit(0)

def client_handler(config_dict, args):
    '''
    Handles client actions and sets up logging
    '''

    log_file = '{0}/log/zback-client.log'.format(config_dict['general']['zdir'])
    log = setup_logging(config_dict['client']['loglevel'], config_dict['general']['log_format'], log_file)

    if args.action == 'start':
        client_start(config_dict)   
    elif args.action == 'stop':
        client_stop(config_dict)
    elif args.action == 'restart':
        client_stop(config_dict)
        client_start(config_dict)
    elif args.action == 'status':
        # Need to refactor the client to use AF_INET
        print "Needs to be reimplemented"
    else:
        print "Unknown command"
        sys.exit(1)

def server_start(config_dict):
    this_server = server.ZbackServer(config_dict)
    print "Starting Zback server..."
    this_server.start()

def server_stop(config_dict):
    print "Sending stop signal to server..."
    try:
        utils.send_message(config_dict['server']['address'],
                           config_dict['server']['port'],
                           "stop")
    except:
        print "Could not connect to server, check if it is running"
        sys.exit(1)
    sys.exit(0)

def server_handler(config_dict, args):
    '''
    Handles server actions and sets up logging
    '''

    log_file = '{0}/log/zback-server.log'.format(config_dict['general']['zdir'])
    log = setup_logging(config_dict['server']['loglevel'], config_dict['general']['log_format'], log_file)

    if args.action == 'start':
        server_start(config_dict)
    elif args.action == 'stop':
        server_stop(config_dict)
    elif args.action == 'restart':
        server_stop(config_dict)
        server_start(config_dict)
    elif args.action == 'status':
        try:
            utils.send_message(config_dict['server']['address'],
                               config_dict['server']['port'],
                               "status")
        except:
            print "Could not connect to server, check if it is running"
    else:
        print "Unknown command"
        sys.exit(1)

if __name__ == "__main__":
    signal.signal(signal.SIGINT, handler_interactive)
    main()